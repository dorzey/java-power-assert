buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ow2.asm:asm:latest.release'
        classpath 'org.ow2.asm:asm-util:latest.release'
    }
}

import org.objectweb.asm.*

plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'nebula.nebula-release' version '4.0.1'
    id 'com.jfrog.bintray' version '1.6'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group = 'io.jschneider'

repositories {
    mavenCentral()
}

configurations {
    shadedCompile
}

configurations.compile.extendsFrom configurations.shadedCompile

dependencies {
    compile files("${System.getProperty('java.home')}/../lib/tools.jar")

    shadedCompile 'commons-lang:commons-lang:2.6'

    testCompile 'junit:junit:latest.release'
    testCompile 'org.ow2.asm:asm:latest.release'
    testCompile 'org.ow2.asm:asm-util:latest.release'
    testCompile 'org.assertj:assertj-core:2.4.1'
}

task markSynthetics << {
    def main = project.convention.getPlugin(JavaPluginConvention).sourceSets.main as SourceSet
    new File(main.output.classesDir, 'org/powerassert/synthetic').listFiles().each {
        logger.info("marking $it.name as synthetic")

        def cw = new ClassWriter(0)
        def cv = new ClassVisitor(Opcodes.ASM5, cw) {
            @Override
            void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
                super.visit(version, access + Opcodes.ACC_SYNTHETIC, name, signature, superName, interfaces)
            }

            @Override
            MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
                return super.visitMethod(access + Opcodes.ACC_SYNTHETIC, name, desc, signature, exceptions)
            }
        }
        def cr = new ClassReader(it.bytes);
        cr.accept(cv, 0)

        it.bytes = cw.toByteArray()
    }
}

// Relocated dependencies are removed from the generated pom
shadowJar {
    configurations = [project.configurations.shadedCompile]
    classifier = null
    dependencies {
        include(dependency('commons-lang:commons-lang'))
    }
    relocate 'org.apache.commons.lang', 'org.powerassert.commons.lang'
}

jar.deleteAllActions()
//jar.dependsOn markSynthetics
jar.dependsOn shadowJar

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        Bintray(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}

bintray {
    user = 'jkschneider'
    key = System.getenv('BINTRAY_KEY')
    dryRun = false
    publish = true
    publications = ['Bintray']

    pkg {
        repo = 'maven'
        name = 'java-power-assert'
        vcsUrl = 'git@github.com:jkschneider/java-power-assert.git'
        websiteUrl = 'https://github.com/jkschneider/java-power-assert'
        issueTrackerUrl = 'https://github.com/jkschneider/java-power-assert/issues'
        licenses = ['Apache-2.0']
        labels = ['unit testing']
        publicDownloadNumbers = true
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

publishing {
    publications {
        Bintray(MavenPublication) {
            pom.withXml {
                def node = asNode()
                node.dependencies.dependency.findAll { ['commons-lang'].contains(it.artifactId.text()) }
                        .each { it.parent().remove(it) }
                node.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    description 'power assertions for java'
                    url 'https://github.com/jkschneider/java-power-assert'
                    scm {
                        url 'https://github.com/jkschneider/java-power-assert.git'
                        connection 'scm:git@github.com:jkschneider/java-power-assert.git'
                        developerConnection 'git@github.com:jkschneider/java-power-assert.git'
                        tag 'HEAD'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'jkschneider'
                            name 'Jon Schneider'
                            email 'jkschneider@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}